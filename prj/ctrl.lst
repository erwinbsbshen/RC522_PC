C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE CTRL
OBJECT MODULE PLACED IN .\ctrl.obj
COMPILER INVOKED BY: D:\keli\C51\BIN\C51.EXE ..\code\ctrl.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\ctrl.lst) OBJECT(.\c
                    -trl.obj)

line level    source

   1          #include "include.h"
   2          
   3          const INT8U DefaultKeyABuf[] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
   4          
   5          INT8U CardRevBuf[16] = { 0 };
   6          INT8U const CardKeyABlockBuf[16] = {
   7                                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   8                                                                          0xff,0x07,0x80,0x69,
   9                                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00,     
  10                                                                          };
  11          
  12          INT8U CtrlMode = CTRL_BOARD_MODE;
  13          INT8U OptMode  = OPT_INC_MODE;
  14          INT8U bPass = 1; bWarn = 0;
  15          INT8U LedOnType = LED_LONG;
  16          
  17          int CARDREDUCE = 2;
  18          int CARDADD = 10;
  19          
  20          
  21          void pass( void )
  22          {
  23   1              LED_ON;
  24   1              BEEP_ON;
  25   1              delay_ms(2000);
  26   1              BEEP_OFF;
  27   1              LED_OFF;
  28   1      }
  29          
  30          void warn(void)
  31          {
  32   1              INT8U i;
  33   1              
  34   1              LED_OFF;
  35   1              for( i = 0; i < 3; i++ )
  36   1              {
  37   2                      LED_ON;
  38   2                      BEEP_ON;
  39   2                      delay_ms(200);
  40   2                      BEEP_OFF;
  41   2                      LED_OFF;
  42   2                      delay_ms(200);
  43   2              }
  44   1      }
  45          
  46          void cal_keyA( INT8U *DestBuf )
  47          {
  48   1              const INT8U KeyABuf[] = { 0x20, 0x12, 0x10, 0x01, 0x00, 0x00 };
  49   1      
  50   1              memcpy( DestBuf, KeyABuf, 6 );
  51   1      }
  52          
  53          void send_rebck( psUartData psUartDataRevSend )
  54          {
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 2   

  55   1              INT8U * pTmp;
  56   1              INT8U Len,Check;
  57   1              INT8U i;
  58   1      
  59   1              Len = psUartDataRevSend->UartCmdLen     + psUartDataRevSend->UartDataLen + 2;
  60   1              pTmp = ( INT8U * )psUartDataRevSend;
  61   1      
  62   1              send_byte( 0xFC );
  63   1              Check = 0xFC;
  64   1              for( i = 0; i < Len; i++ )
  65   1              {
  66   2                      send_byte( *pTmp );
  67   2                      Check ^= *pTmp++;
  68   2              }
  69   1              send_byte( Check );     
  70   1      }
  71          
  72          void uart_over( void )
  73          {
  74   1              UartCount = 0;
  75   1              UartStart = FALSE;
  76   1              UartComp = FALSE;
  77   1      }
  78          
  79          INT8U check_com( psUartData psUartDataRevSend )
  80          {
  81   1              psUartDataRevSend->UartDataBuf[0] = 0xAA;
  82   1      
  83   1              return TRUE;
  84   1      }
  85          
  86          INT8U req_card_sn( psUartData psUartDataRevSend )
  87          {
  88   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
  89   1              {
  90   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
  91   2                      {
  92   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
  93   3                              memset( psUartDataRevSend->UartDataBuf, 0x00, psUartDataRevSend->UartDataLen );
  94   3                              bWarn = 1;
  95   3                              return FALSE;
  96   3                      }       
  97   2              }
  98   1              
  99   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 100   1              {
 101   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 102   2                      memset( psUartDataRevSend->UartDataBuf, 0x00, psUartDataRevSend->UartDataLen );
 103   2                      bWarn = 1;
 104   2                      return FALSE;   
 105   2              }
 106   1      
 107   1              memcpy( psUartDataRevSend->UartDataBuf, &CardRevBuf[2], 4 );
 108   1      
 109   1              bPass = 1;
 110   1      
 111   1              return TRUE;
 112   1      }
 113          
 114          INT8U updata_key( psUartData psUartDataRevSend )
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 3   

 115          {
 116   1              INT8U CardKeyABuf[6];
 117   1              INT8U KeyBlockAddr;
 118   1      
 119   1              psUartDataRevSend->UartDataLen = 7;
 120   1              KeyBlockAddr = psUartDataRevSend->UartDataBuf[0];
 121   1      
 122   1              if( KeyBlockAddr % 4 != 3 )
 123   1              {
 124   2                      psUartDataRevSend->UartErrCode = ERROR_BLOCK_ADDR;
 125   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 126   2                      bWarn = 1;
 127   2                      return FALSE;   
 128   2              }
 129   1      
 130   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 131   1              {
 132   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 133   2                      {
 134   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
 135   3                              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 136   3                              bWarn = 1;
 137   3                              return FALSE;
 138   3                      }       
 139   2              }
 140   1      
 141   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 142   1              {
 143   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 144   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 145   2                      bWarn = 1;
 146   2                      return FALSE;   
 147   2              }
 148   1      
 149   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 150   1              {
 151   2                      psUartDataRevSend->UartErrCode = ERROR_SLCT;
 152   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 153   2                      bWarn = 1;
 154   2                      return FALSE;
 155   2              }
 156   1      
 157   1              memcpy( CardKeyABuf, &psUartDataRevSend->UartDataBuf[1], 6 );
 158   1      
 159   1              if( PcdAuthState( PICC_AUTHENT1A, KeyBlockAddr, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 160   1              {
 161   2                      psUartDataRevSend->UartErrCode = ERROR_KEYA_IC;
 162   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 163   2                      bWarn = 1;
 164   2                      return FALSE;   
 165   2              }
 166   1      
 167   1              memcpy( CardKeyABlockBuf, &psUartDataRevSend->UartDataBuf[7], 6 );
 168   1      
 169   1              if( PcdWrite( KeyBlockAddr, CardKeyABlockBuf ) != MI_OK )// Ð´¿¨
 170   1              {
 171   2                      psUartDataRevSend->UartErrCode = ERROR_WRITE_IC;
 172   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 173   2                      bWarn = 1;
 174   2                      return FALSE;
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 4   

 175   2              }
 176   1      
 177   1              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 6 );
 178   1              bPass = 1;
 179   1              return TRUE;
 180   1      }
 181          
 182          INT8U block_write( psUartData psUartDataRevSend )
 183          {
 184   1              INT8U CardWriteBuf[16];
 185   1              INT8U CardKeyABuf[6];
 186   1              INT8U KeyBlockAddr;
 187   1      
 188   1              psUartDataRevSend->UartDataLen = 0x11;
 189   1              KeyBlockAddr = psUartDataRevSend->UartDataBuf[0];
 190   1      
 191   1              if( KeyBlockAddr % 4 == 3 )
 192   1              {
 193   2                      psUartDataRevSend->UartErrCode = ERROR_BLOCK_ADDR;
 194   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 195   2                      bWarn = 1;
 196   2                      return FALSE;   
 197   2              }
 198   1      
 199   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 200   1              {
 201   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 202   2                      {
 203   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
 204   3                              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 205   3                              bWarn = 1;
 206   3                              return FALSE;
 207   3                      }       
 208   2              }
 209   1      
 210   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 211   1              {
 212   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 213   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 214   2                      bWarn = 1;
 215   2                      return FALSE;   
 216   2              }
 217   1      
 218   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 219   1              {
 220   2                      psUartDataRevSend->UartErrCode = ERROR_SLCT;
 221   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 222   2                      bWarn = 1;
 223   2                      return FALSE;
 224   2              }
 225   1      
 226   1              memcpy( CardKeyABuf, &psUartDataRevSend->UartDataBuf[1], 6 );
 227   1      
 228   1              if( PcdAuthState( PICC_AUTHENT1A, KeyBlockAddr, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 229   1              {
 230   2                      psUartDataRevSend->UartErrCode = ERROR_KEYA_IC;
 231   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 232   2                      bWarn = 1;
 233   2                      return FALSE;   
 234   2              }
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 5   

 235   1      
 236   1              memcpy( CardWriteBuf, &psUartDataRevSend->UartDataBuf[7], 16 );
 237   1              if( PcdWrite( KeyBlockAddr, CardWriteBuf ) != MI_OK )//Ð´¿¨
 238   1              {
 239   2                      psUartDataRevSend->UartErrCode = ERROR_WRITE_IC;
 240   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 241   2                      bWarn = 1;
 242   2                      return FALSE;
 243   2              }
 244   1              bPass = 1;
 245   1              
 246   1              return TRUE;
 247   1      }
 248          
 249          INT8U block_read( psUartData psUartDataRevSend )
 250          {
 251   1              INT8U CardReadBuf[16];
 252   1              INT8U CardKeyABuf[6];
 253   1              INT8U KeyBlockAddr;
 254   1      
 255   1              psUartDataRevSend->UartDataLen = 0x11;
 256   1              KeyBlockAddr = psUartDataRevSend->UartDataBuf[0];
 257   1      
 258   1              if( KeyBlockAddr % 4 == 3 )
 259   1              {
 260   2                      psUartDataRevSend->UartErrCode = ERROR_BLOCK_ADDR;
 261   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 262   2                      bWarn = 1;
 263   2                      return FALSE;   
 264   2              }
 265   1      
 266   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 267   1              {
 268   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 269   2                      {
 270   3                              psUartDataRevSend->UartErrCode = ERROR_NOCARD;
 271   3                              memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 272   3                              bWarn = 1;
 273   3                              return FALSE;
 274   3                      }       
 275   2              }
 276   1      
 277   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 278   1              {
 279   2                      psUartDataRevSend->UartErrCode = ERROR_ATCLL;
 280   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 281   2                      bWarn = 1;
 282   2                      return FALSE;   
 283   2              }
 284   1      
 285   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 286   1              {
 287   2                      psUartDataRevSend->UartErrCode = ERROR_SLCT;
 288   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 289   2                      bWarn = 1;
 290   2                      return FALSE;
 291   2              }
 292   1      
 293   1              memcpy( CardKeyABuf, &psUartDataRevSend->UartDataBuf[1], 6 );
 294   1      
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 6   

 295   1              if( PcdAuthState( PICC_AUTHENT1A, KeyBlockAddr, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 296   1              {
 297   2                      psUartDataRevSend->UartErrCode = ERROR_KEYA_IC;
 298   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 299   2                      bWarn = 1;
 300   2                      return FALSE;   
 301   2              }
 302   1      
 303   1              if( PcdRead( KeyBlockAddr, CardReadBuf ) != MI_OK )// ¶Á¿¨
 304   1              {
 305   2                      psUartDataRevSend->UartErrCode = ERROR_READ_IC;
 306   2                      memset( &psUartDataRevSend->UartDataBuf[1], 0x00, 16 );
 307   2                      bWarn = 1;
 308   2                      return FALSE;
 309   2              }
 310   1              memcpy( &psUartDataRevSend->UartDataBuf[1], CardReadBuf, 16 );
 311   1              bPass = 1;
 312   1                              
 313   1              return TRUE;
 314   1      }
 315          
 316          void display_error( void )
 317          {
 318   1              lcdMsg("³ÌÐò³ö´í", 1, 3 );
 319   1              lcdMsg("----", 4, 3);
 320   1      }
 321          
 322          void display_no_id( void )
 323          {
 324   1          char DisplayBuf[10];
 325   1          memset(DisplayBuf,0,10);
 326   1      
 327   1              switch( OptMode )
 328   1              {
 329   2                      case OPT_INC_MODE:
 330   2                              lcdMsg("Ïû·ÑÄ£Ê½", 1, 3 );
 331   2                              lcdMsg("Ïû·Ñ£º",3,0);
 332   2                              sprintf(DisplayBuf,"%d.00",CARDREDUCE);
 333   2                              lcdMsg(DisplayBuf , 3, 3 );
 334   2                              break;
 335   2      
 336   2                      case OPT_ADD_MODE:
 337   2                              lcdMsg("³äÖµÄ£Ê½", 1, 3 );
 338   2                              lcdMsg("³äÖµ£º",3,0);
 339   2                              sprintf(DisplayBuf,"%d.0",CARDADD);
 340   2                              lcdMsg(DisplayBuf , 3, 3 );
 341   2                              break;
 342   2      
 343   2                      case OPT_READ_MODE:
 344   2                              lcdMsg("¶Á¿¨Ä£Ê½", 1, 3 );
 345   2                              lcdMsg("¶Á¿¨£º----",3,0);
 346   2                              break;
 347   2      
 348   2                      case OPT_REG_MODE:
 349   2                              lcdMsg("¿ª¿¨Ä£Ê½", 1, 3 );
 350   2                              lcdMsg("¿ª¿¨£º----",3,0);
 351   2                              break;
 352   2      
 353   2                      default:
 354   2                              break;
 355   2              }
 356   1      }
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 7   

 357          
 358          void display_money( INT32U CardMoney )
 359          {
 360   1              char DisplayBuf[10];
 361   1              char *pDisplayChar;
 362   1              INT32U Tmp;
 363   1      
 364   1              pDisplayChar = DisplayBuf;
 365   1      
 366   1              if( CardMoney > 9999 )  //×î´óÏÔÊ¾9999
 367   1              {
 368   2                      CardMoney = 9999;
 369   2              }
 370   1      
 371   1              Tmp = CardMoney;
 372   1      
 373   1              *pDisplayChar++ = Tmp / 1000 + '0';
 374   1              Tmp %= 1000;
 375   1              *pDisplayChar++ = Tmp / 100 + '0';
 376   1              Tmp %= 100;
 377   1              *pDisplayChar++ = Tmp / 10 + '0';
 378   1              Tmp %= 10;
 379   1              *pDisplayChar++ = Tmp + '0';
 380   1              *pDisplayChar++ = '\0';
 381   1      
 382   1              lcdMsg(DisplayBuf, 4, 3 );
 383   1      }
 384          
 385          void display_id( INT8U * SrcBuf )
 386          {
 387   1              char DisplayBuf[10];
 388   1              char *pDisplayChar;
 389   1              INT8U Tmp, i;
 390   1      
 391   1              pDisplayChar = DisplayBuf;
 392   1      
 393   1              for( i = 0; i < 4; i++ )
 394   1              {
 395   2                      Tmp = ( ( *SrcBuf ) >> 4 ) & 0x0F;      
 396   2                      if( ( Tmp >=0 ) && ( Tmp <= 9 ) )
 397   2                      {
 398   3                              *pDisplayChar ++ = '0' + Tmp;   
 399   3                      }
 400   2                      else
 401   2                      {
 402   3                              *pDisplayChar ++ = 'A' + Tmp - 10;
 403   3                      }
 404   2      
 405   2                      Tmp = ( *SrcBuf ) & 0x0F;       
 406   2                      if( ( Tmp >=0 ) && ( Tmp <= 9 ) )
 407   2                      {
 408   3                              *pDisplayChar ++ = '0' + Tmp;   
 409   3                      }
 410   2                      else
 411   2                      {
 412   3                              *pDisplayChar ++ = 'A' + Tmp - 10;
 413   3                      }
 414   2      
 415   2                      SrcBuf ++;
 416   2              }
 417   1              *pDisplayChar ++ = '\0';
 418   1      
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 8   

 419   1              lcdMsg(DisplayBuf, 2, 3 );
 420   1      }
 421          
 422          INT8U ctrl_by_pc( psUartData psUartDataRevSend )
 423          {
 424   1              psUartDataRevSend = psUartDataRevSend;
 425   1      
 426   1              CtrlMode = CTRL_PC_MODE;
 427   1              
 428   1              lcdMsg("µçÄÔ¿ØÖÆ", 1, 3 );
 429   1              lcdMsg("----", 4, 3);
 430   1              lcdMsg("----", 3, 3);
 431   1              return TRUE;    
 432   1      }
 433          
 434          INT8U ctrl_by_board( psUartData psUartDataRevSend )
 435          {
 436   1              psUartDataRevSend = psUartDataRevSend;
 437   1              
 438   1              CtrlMode = CTRL_BOARD_MODE;
 439   1      
 440   1              display_no_id();
 441   1              
 442   1              return TRUE;    
 443   1      }
 444          
 445          void pc_process( void )
 446          {
 447   1              psUartData psUartDataRevSend;
 448   1              INT8U i;
 449   1              INT8U Check = 0xFE;
 450   1              INT8U Len;
 451   1      
 452   1              if( UartComp != TRUE )
 453   1              {
 454   2                      return;
 455   2              }
 456   1      
 457   1              psUartDataRevSend = (psUartData)UartBuf;
 458   1              Len = psUartDataRevSend->UartCmdLen + psUartDataRevSend->UartDataLen + 3;
 459   1      
 460   1              for( i = 0; i < ( Len - 1 ); i ++ )
 461   1              {
 462   2                      Check ^= UartBuf[i];
 463   2              }
 464   1              /*
 465   1              if( Check != UartBuf[Len - 1] )
 466   1              {
 467   1                      psUartDataRevSend->UartErrCode = ERROR_CHECK;
 468   1                      send_rebck( psUartDataRevSend );
 469   1                      uart_over();
 470   1                      return;
 471   1              }
 472   1              */
 473   1              
 474   1              switch( psUartDataRevSend->UartCmd )
 475   1              {       
 476   2                      case 0x0002:  //¼ì²â´®¿Ú×´Ì¬ -> fe 03 01 c1 c0 er 00 ck,  <- fc 03 01 c1 c0 er aa ck
 477   2                              check_com( psUartDataRevSend );
 478   2                              break;
 479   2                      case 0x0003: //²éÑ¯¿¨ºÅ  ->     fe 03 04 c1 c0 er 00 00 00 00 ck, <- fc 03 04 c1 c0 er sn3 sn2 sn1 sn0 ck
 480   2                              req_card_sn( psUartDataRevSend );
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 9   

 481   2                              break;
 482   2      
 483   2                      case 0x0110: //ÐÞ¸ÄÃÜÂë·½Ê½0 fe 03 0d c1 c0 er kn o5 o4.. o0 n5 n4.. n0 ck, <-fe 03 07 c1 c0 er kn n5 n4
             -.. n0 ck        
 484   2                              updata_key( psUartDataRevSend ); //ÐÞ¸ÄÃÜÂë kn%4 == 3   
 485   2                              break;
 486   2      
 487   2                      case 0x0120: //¶ÁÊý¾Ý¿é·½Ê½0  -> fe 03 07 c1 c0 er kn ky5 ... ky0 ck, <- fc 03 11 c1 c0 er kn d15...d0 c
             -k 
 488   2                              block_read( psUartDataRevSend ); //¶ÁÊý¾Ý¿é kn%4 != 3   
 489   2                              break;
 490   2      
 491   2                      case 0x0130: //Ð´Êý¾Ý¿é·½Ê½0  -> fe 03 07 c1 c0 er kn ky5 ... ky0 ck, <- fc 03 11 c1 c0 er kn d15...d0 c
             -k 
 492   2                              block_write( psUartDataRevSend ); //¶ÁÊý¾Ý¿é kn%4 != 3  
 493   2                              break;
 494   2      
 495   2                      case 0x0140: //°å×Ó¿ØÖÆ
 496   2                              ctrl_by_board( psUartDataRevSend ); //¶ÁÊý¾Ý¿é kn%4 != 3        
 497   2                              break;  
 498   2                              
 499   2                      default:
 500   2                              psUartDataRevSend->UartErrCode = ERROR_NOCMD;   
 501   2                              break;
 502   2              }
 503   1              send_rebck( psUartDataRevSend );
 504   1              uart_over();
 505   1      }
 506          
 507          INT8U board_uart_event( void )
 508          {
 509   1              psUartData psUartDataRevSend;
 510   1              INT8U i;
 511   1              INT8U Check = 0xFE;
 512   1              INT8U Len;
 513   1              INT8U Result = FALSE;
 514   1      
 515   1              if( UartComp != TRUE )
 516   1              {
 517   2                      return Result;
 518   2              }
 519   1      
 520   1              psUartDataRevSend = (psUartData)UartBuf;
 521   1              Len = psUartDataRevSend->UartCmdLen + psUartDataRevSend->UartDataLen + 3;
 522   1      
 523   1              for( i = 0; i < ( Len - 1 ); i ++ )
 524   1              {
 525   2                      Check ^= UartBuf[i];
 526   2              }
 527   1              /*
 528   1              if( Check != UartBuf[Len - 1] )
 529   1              {
 530   1                      psUartDataRevSend->UartErrCode = ERROR_CHECK;
 531   1                      send_rebck( psUartDataRevSend );
 532   1                      uart_over();
 533   1                      return;
 534   1              }
 535   1              */
 536   1              
 537   1              switch( psUartDataRevSend->UartCmd )
 538   1              {       
 539   2                      case 0x0141:  //¼ÆËã»ú¿ØÖÆ
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 10  

 540   2                              ctrl_by_pc( psUartDataRevSend );
 541   2                              Result = TRUE;
 542   2                              break;
 543   2                              
 544   2                      default:
 545   2                              psUartDataRevSend->UartErrCode = ERROR_NOCMD;   
 546   2                              break;
 547   2              }
 548   1              send_rebck( psUartDataRevSend );
 549   1              uart_over();
 550   1      
 551   1              return Result;
 552   1      }
 553          
 554          void board_process( void )
 555          {
 556   1              INT8U CardReadBuf[16];
 557   1              INT8U CardWriteBuf[16];
 558   1              INT8U CardKeyABuf[6];
 559   1              INT32U CardMoney;
 560   1              INT8U KeyVal;
 561   1      
 562   1      
 563   1              if( board_uart_event() == TRUE )   //¼ÆËã»ú¿ØÖÆ
 564   1              {
 565   2                      return;
 566   2              }
 567   1      
 568   1              KeyVal = get_key();
 569   1              switch( KeyVal )
 570   1              {
 571   2                      case KEY_1:
 572   2                              OptMode = OPT_INC_MODE;
 573   2                              lcdMsg("Ïû·ÑÄ£Ê½", 1, 3 );
 574   2                              break;
 575   2      
 576   2                      case KEY_2:
 577   2                              OptMode = OPT_ADD_MODE;
 578   2                              lcdMsg("³äÖµÄ£Ê½", 1, 3 );
 579   2                              break;
 580   2      
 581   2                      case KEY_3:
 582   2                              OptMode = OPT_READ_MODE;
 583   2                              lcdMsg("¶Á¿¨Ä£Ê½", 1, 3 );
 584   2                              break;
 585   2      
 586   2                      case KEY_4:
 587   2                              OptMode = OPT_REG_MODE;
 588   2                              lcdMsg("¿ª¿¨Ä£Ê½", 1, 3 );
 589   2                              break;
 590   2      
 591   2                      default:
 592   2                              break;
 593   2              }
 594   1      
 595   1              if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö½
             -Ú        
 596   1              {
 597   2                      if( PcdRequest( PICC_REQIDL, &CardRevBuf[0] ) != MI_OK )//Ñ°ÌìÏßÇøÄÚÎ´½øÈëÐÝÃß×´Ì¬µÄ¿¨£¬·µ»Ø¿¨Æ¬ÀàÐÍ 2×Ö
             -½Ú        
 598   2                      {
 599   3                              display_no_id();
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 11  

 600   3                              return;
 601   3                      }       
 602   2              }
 603   1      
 604   1              if( PcdAnticoll( &CardRevBuf[2] ) != MI_OK ) //·À³å×²£¬·µ»Ø¿¨µÄÐòÁÐºÅ 4×Ö½Ú 
 605   1              {
 606   2                      display_no_id();
 607   2                      return; 
 608   2              }
 609   1      
 610   1              if( PcdSelect( &CardRevBuf[2] ) != MI_OK )//Ñ¡¿¨
 611   1              {
 612   2                      display_no_id();
 613   2                      return;
 614   2              }
 615   1              display_id( &CardRevBuf[2] );
 616   1      
 617   1              cal_keyA( CardKeyABuf );                //¼ÆËãÃÜÂë
 618   1      
 619   1              switch( OptMode )
 620   1              {
 621   2                      case OPT_REG_MODE:                      //ÐÂ¿¨×¢²á
 622   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, DefaultKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 623   2                              {
 624   3                                      display_error();        
 625   3                                      return; 
 626   3                              }
 627   2                              memset( CardWriteBuf, 0, 16 );
 628   2                              if( PcdWrite( 4, CardWriteBuf ) != MI_OK )// Ð´¿¨
 629   2                              {
 630   3                                      display_error();
 631   3                                      return; 
 632   3                              }
 633   2                              memcpy( CardWriteBuf, CardKeyABlockBuf, 16 );
 634   2                              memcpy( CardWriteBuf, CardKeyABuf, 6 );
 635   2                              if( PcdWrite( 7, CardWriteBuf ) != MI_OK )// ÐÞ¸ÄÃÜÂë
 636   2                              {
 637   3                                      display_error();
 638   3                                      return; 
 639   3                              }
 640   2                              lcdMsg("×¢²á³É¹¦", 1, 3);
 641   2                              bPass = 1;
 642   2                              break;
 643   2                                      
 644   2                      case OPT_ADD_MODE:              //³äÖµ·½Ê½
 645   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 646   2                              {
 647   3                                      display_error();
 648   3                                      return; 
 649   3                              }
 650   2                              if( PcdRead( 4, CardReadBuf ) != MI_OK )// ¶ÁÊý¾Ý
 651   2                              {
 652   3                                      display_error();
 653   3                                      return; 
 654   3                              }
 655   2                              memcpy( ( INT8U * )&CardMoney, CardReadBuf, 4 ); 
 656   2                              CardMoney += CARDADD;                   //³äÖµÔö¼Ó100
 657   2                              memset( CardWriteBuf, 0, 16 );
 658   2                              memcpy( CardWriteBuf, ( INT8U * )&CardMoney, 4 ); 
 659   2                              if( PcdWrite( 4, CardWriteBuf ) != MI_OK )// Ð´Êý¾Ý
 660   2                              {
 661   3                                      display_error();
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 12  

 662   3                                      return; 
 663   3                              }
 664   2                              display_money( CardMoney );
 665   2                              bPass = 1;
 666   2                              break;
 667   2                              
 668   2                      case OPT_INC_MODE:              //Ïû·Ñ·½Ê½
 669   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 670   2                              {
 671   3                                      display_error();
 672   3                                      return; 
 673   3                              }
 674   2                              if( PcdRead( 4, CardReadBuf ) != MI_OK )// ¶ÁÊý¾Ý
 675   2                              {
 676   3                                      display_error();
 677   3                                      return; 
 678   3                              }
 679   2                              memcpy( ( INT8U * )&CardMoney, CardReadBuf, 4 ); 
 680   2                              if( CardMoney < 8 )
 681   2                              {
 682   3                                      display_error();
 683   3                                      bWarn = 1;
 684   3                                      return;
 685   3                              }
 686   2                              CardMoney -= CARDREDUCE;        //Ïû·Ñ -8
 687   2                              memset( CardWriteBuf, 0, 16 );
 688   2                              memcpy( CardWriteBuf, ( INT8U * )&CardMoney, 4 ); 
 689   2                              if( PcdWrite( 4, CardWriteBuf ) != MI_OK )// Ð´Êý¾Ý
 690   2                              {
 691   3                                      display_error();
 692   3                                      return; 
 693   3                              }
 694   2                              display_money( CardMoney );
 695   2                              bPass = 1;
 696   2                              break;  
 697   2                              
 698   2                      case OPT_READ_MODE:             //¶Á¿¨·½Ê½
 699   2                              if( PcdAuthState( PICC_AUTHENT1A, 4, CardKeyABuf, &CardRevBuf[2] ) != MI_OK )// ÑéÖ¤ÃÜÂë
 700   2                              {
 701   3                                      display_error();
 702   3                                      return; 
 703   3                              }
 704   2                              if( PcdRead( 4, CardReadBuf ) != MI_OK )// ¶ÁÊý¾Ý
 705   2                              {
 706   3                                      display_error();
 707   3                                      return; 
 708   3                              }
 709   2                              memcpy( ( INT8U * )&CardMoney, CardReadBuf, 4 ); 
 710   2                              display_money( CardMoney );
 711   2                              bPass = 1;
 712   2                              break;                                                                                                 
             -                                                                                                                        
             -                                                                                                                        
             -                                                                                                                        
             -                                                                                                                        
             -                 
 713   2                              
 714   2                      default:
 715   2                              break;
 716   2              }
 717   1              PcdHalt();      
 718   1      }
C51 COMPILER V7.50   CTRL                                                                  06/12/2020 10:11:06 PAGE 13  

 719          
 720          void ctrl_process( void )
 721          {
 722   1      
 723   1              if( CtrlMode == CTRL_PC_MODE )
 724   1              {
 725   2                      pc_process();
 726   2              }
 727   1              else if( CtrlMode == CTRL_BOARD_MODE )
 728   1              {
 729   2                      board_process();
 730   2              }
 731   1      
 732   1              if( bPass )
 733   1              {
 734   2                      bPass = 0;
 735   2                      pass(); 
 736   2      
 737   2              }
 738   1              if( bWarn )
 739   1              {
 740   2                      bWarn = 0;
 741   2                      warn();
 742   2              }
 743   1      }
 744          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3707    ----
   CONSTANT SIZE    =    121    ----
   XDATA SIZE       =     48     177
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
